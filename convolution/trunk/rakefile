begin	
  require 'rubygems'
  require 'rake/gempackagetask'
rescue Exception
  nil
end
require 'rake/clean'
require 'rake/testtask'
require 'rake/rdoctask'

#CLEAN.include('**/*.o')
#CLOBBER.include('test/output/*')
SPEC = eval(File.open("gemspec","r").read)

POPULATE_DIR      = '/cygdrive/w/downloads'

def filename_to_sym(filename)
  File.basename(filename,File.extname(filename)).to_sym
end

# ====================================================================
# TEST TASKS
test_tasks = {
  :test_all   => ["Run all tests"],
}
# Syntax checkning task
task :test_syn do
  Dir.glob("**/*.rb").each {|file|
    printf "Checking Syntax of #{file} ..."
    system("ruby -c #{file}")
  }
end
# Test tasks for each test file
SPEC.test_files.each do |test_file|
  next unless File.extname(test_file) == ".rb"
  Rake::TestTask.new(filename_to_sym(test_file)) do |t|
    test_tasks[:test_all]  << filename_to_sym(test_file)
    t.test_files = FileList[test_file]
    t.warning = false
    t.verbose = true
  end
end

#desc "Test the executables for ChipDiskData with default configuration files"
#task :test_bin do
#  %w{qpol dfsc dfs}.each {|exe|
#    command = "./bin/#{exe}.rb -c test/data/config/#{exe}.conf"
#    puts command
#    system(command)
#  }
#end

# Test Tasks for groups of test files
test_tasks.each do |k,v|
  desc  v[0]
  task k => v[1..-1]
end
# ====================================================================
# Create a task that will package the software into distributable
# tar, zip and gem files.
if ! defined?(Gem)
  puts "Package Target requires RubyGEMs"
else
  package_task = Rake::GemPackageTask.new(SPEC) do |pkg|
    pkg.need_zip = false
    pkg.need_tar = false
  end
end
# ====================================================================
# Install qpol_data using gem
desc "Install the Library with docs"
task :install => [:repackage] do
  command = "gem install pkg/#{SPEC.name}-#{SPEC.version}.gem"
  puts command
  system(command)
end
task :smallInstall => [:repackage] do 
  command = "gem install pkg/#{SPEC.name}-#{SPEC.version}.gem --no-ri --no-rdoc"
  puts command
  system(command)
end
#desc "Only install what is in bin to /usr/local/bin"
#task :binstall do
#  if File.directory?('/usr/local/bin')
#    bins = Dir.glob("bin/*.rb") + Dir.glob("bin/autocalib.*")
#    command = "install -m 755 #{bins.join(' ')} /usr/local/bin"
#    puts command
#    system(command)
#  end
#end
# ====================================================================
desc "All"
task :all => [:install, :populate] do
end

# ====================================================================
# Create a task to build the RDOC documentation tree.
Rake::RDocTask.new("rdoc") { |rdoc|
  rdoc.rdoc_dir = 'doc'
  rdoc.title    = "PurpleDB - DatabaseLike Library for data processing + saving"
  rdoc.options << '-ad' << '--line-numbers' << '--inline-source'
  rdoc.rdoc_files.include('lib/**/*.rb', 'doc/**/*.rdoc')
}
############################################################
files       = Dir.glob("{lib,test}/*.rb")
visual_mode = (ENV["vimode"].nil?) ? '-p' : ENV["vimode"]
desc "Edit texfiles #{files.join(", ")}"
task :edit do
  com = (File.exist?("Session.vim"))\
    ? 'vim -S'\
    : "vim #{files.join(" ")} rakefile gemspec #{visual_mode}"
  puts com
  system(com)
end
#task :edit_base do
#  files = %w|lib/tube_data.rb lib/tube_data_processing.rb|
#  com = "vim #{files.join(" ")} #{visual_mode}"
#  system(com)
#end
task :edit_build do
  files = %w|rakefile gemspec|
  com = "vim #{files.join(" ")} #{visual_mode}"
  system(com)
end
############################################################
# ====================================================================
# Task to build and populate the changelog
desc " build and populate the changelog"
task :populate_changelog do
  changelogfile     = "CHANGELOG"
  changelogfile_pop = "tube_data_#{changelogfile}.html"
  changelog_proc    = "/usr/bin/redcloth"
  if (File.directory?(POPULATE_DIR) and File.executable?(changelog_proc))
    command = "#{changelog_proc} #{changelogfile} > #{changelogfile_pop}"
    puts command 
    system(command)
    puts "copy #{changelogfile_pop} to #{POPULATE_DIR}"
    FileUtils.cp(changelogfile_pop,POPULATE_DIR)
  else
    dir_found = File.directory?(POPULATE_DIR) ? 'ja' : 'nein'
    exe_found = File.executable?(changelog_proc) ? 'ja' : 'nein'
    puts "#{POPULATE_DIR}   found?: #{dir_found}"
    puts "#{changelog_proc} found?: #{exe_found}"
  end
end
# Task to build and populate the package
desc " build and populate the package"
task :populate => [:repackage, :populate_changelog] do 
  pkg = "pkg/#{SPEC.name}-#{SPEC.version}.gem"
  if (File.directory?(POPULATE_DIR) and File.file?(pkg))
    puts "copy #{pkg} to #{POPULATE_DIR}"
    File.cp(pkg, POPULATE_DIR)
  else
    puts "Cannot find #{POPULATE_DIR} or #{pkg}"
  end
end
###############################################################################
desc "renew the tags file"
task :tags do
  com = "rtags --vi -f tags lib/*.rb"
  system(com)
end
#
#
# vim:ft=ruby
#
